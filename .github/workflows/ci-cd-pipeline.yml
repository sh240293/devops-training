name: Django CI/CD Pipeline

on:
  push:
    branches: [ ci-cd ]
  pull_request:
    branches: [ ci-cd ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  K8S_NAMESPACE: django-app
  APP_NAME: django-app
  TRIVY_PASS_THRESHOLD: 80
  # Update this with your SonarQube internal IP
  SONAR_HOST_URL: http://192.168.1.100:9000

jobs:
  sonarqube:
    name: SonarQube Scan
    runs-on: self-hosted # This requires setting up a self-hosted runner
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ env.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.exclusions=**/migrations/**

  build-and-push:
    name: Build and Push Docker Image
    needs: sonarqube
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/ci-cd'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate tags
        id: tags
        run: |
          # Get epoch timestamp
          EPOC=$(date +%s)
          # Get last 5 digits of commit SHA
          SHORT_SHA=${GITHUB_SHA: -5}
          echo "EPOC=$EPOC" >> $GITHUB_OUTPUT
          echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_OUTPUT
          echo "TAGS=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$EPOC,${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$SHORT_SHA" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.tags.outputs.TAGS }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  trivy-scan:
    name: Vulnerability Scan with Trivy
    needs: build-and-push
    runs-on: ubuntu-latest
    outputs:
      scan-passed: ${{ steps.evaluate-scan.outputs.scan-passed }}
      critical-count: ${{ steps.evaluate-scan.outputs.critical-count }}
      high-count: ${{ steps.evaluate-scan.outputs.high-count }}
      total-count: ${{ steps.evaluate-scan.outputs.total-count }}
      pass-percentage: ${{ steps.evaluate-scan.outputs.pass-percentage }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        id: trivy-scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.SHORT_SHA }}
          format: 'json'
          output: 'trivy-results.json'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW,UNKNOWN'

      - name: Upload Trivy scan results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-results
          path: trivy-results.json

      - name: Evaluate scan results
        id: evaluate-scan
        run: |
          # Parse Trivy JSON results and calculate pass percentage
          SCAN_RESULTS="trivy-results.json"
          
          if [ ! -f "$SCAN_RESULTS" ]; then
            echo "❌ Trivy results file not found"
            echo "scan-passed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Count vulnerabilities by severity
          CRITICAL_COUNT=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' $SCAN_RESULTS)
          HIGH_COUNT=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity == "HIGH")] | length' $SCAN_RESULTS)
          MEDIUM_COUNT=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity == "MEDIUM")] | length' $SCAN_RESULTS)
          LOW_COUNT=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity == "LOW")] | length' $SCAN_RESULTS)
          UNKNOWN_COUNT=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity == "UNKNOWN")] | length' $SCAN_RESULTS)
          
          # Calculate total vulnerabilities
          TOTAL_VULNERABILITIES=$((CRITICAL_COUNT + HIGH_COUNT + MEDIUM_COUNT + LOW_COUNT + UNKNOWN_COUNT))
          
          # Calculate pass percentage (treat CRITICAL and HIGH as failures)
          if [ $TOTAL_VULNERABILITIES -eq 0 ]; then
            PASS_PERCENTAGE=100
          else
            # Count passed vulnerabilities (MEDIUM, LOW, UNKNOWN are considered passed for this calculation)
            PASSED_VULNERABILITIES=$((MEDIUM_COUNT + LOW_COUNT + UNKNOWN_COUNT))
            PASS_PERCENTAGE=$((PASSED_VULNERABILITIES * 100 / TOTAL_VULNERABILITIES))
          fi
          
          echo "Critical vulnerabilities: $CRITICAL_COUNT"
          echo "High vulnerabilities: $HIGH_COUNT"
          echo "Medium vulnerabilities: $MEDIUM_COUNT"
          echo "Low vulnerabilities: $LOW_COUNT"
          echo "Unknown vulnerabilities: $UNKNOWN_COUNT"
          echo "Total vulnerabilities: $TOTAL_VULNERABILITIES"
          echo "Pass percentage: $PASS_PERCENTAGE%"
          echo "Threshold: ${{ env.TRIVY_PASS_THRESHOLD }}%"
          
          # Check if we meet the threshold and have no critical vulnerabilities
          if [ $PASS_PERCENTAGE -ge ${{ env.TRIVY_PASS_THRESHOLD }} ] && [ $CRITICAL_COUNT -eq 0 ]; then
            echo "✅ Scan passed with $PASS_PERCENTAGE% pass rate"
            echo "scan-passed=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Scan failed with $PASS_PERCENTAGE% pass rate"
            echo "scan-passed=false" >> $GITHUB_OUTPUT
          fi
          
          # Output counts for reporting
          echo "critical-count=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
          echo "high-count=$HIGH_COUNT" >> $GITHUB_OUTPUT
          echo "total-count=$TOTAL_VULNERABILITIES" >> $GITHUB_OUTPUT
          echo "pass-percentage=$PASS_PERCENTAGE" >> $GITHUB_OUTPUT

      - name: Upload Trivy scan results to GitHub Security tab
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.json'

  security-approval:
    name: Security Approval
    needs: trivy-scan
    runs-on: ubuntu-latest
    if: ${{ needs.trivy-scan.outputs.scan-passed == 'false' && github.ref == 'refs/heads/ci-cd' }}
    
    steps:
      - name: Check Trivy results
        run: |
          echo "Security scan did not meet the ${{ env.TRIVY_PASS_THRESHOLD }}% threshold"
          echo "Critical vulnerabilities: ${{ needs.trivy-scan.outputs.critical-count }}"
          echo "High vulnerabilities: ${{ needs.trivy-scan.outputs.high-count }}"
          echo "Total vulnerabilities: ${{ needs.trivy-scan.outputs.total-count }}"
          echo "Pass percentage: ${{ needs.trivy-scan.outputs.pass-percentage }}%"
          
          # Fail the job to prevent automatic deployment
          if [ "${{ needs.trivy-scan.outputs.scan-passed }}" = "false" ]; then
            echo "❌ Deployment blocked due to security vulnerabilities"
            exit 1
          fi

  deploy:
    name: Deploy to Kubernetes
    needs: [build-and-push, trivy-scan]
    if: ${{ needs.trivy-scan.outputs.scan-passed == 'true' && github.ref == 'refs/heads/ci-cd' }}
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Display security status
        run: |
          echo "✅ Security scan passed with ${{ needs.trivy-scan.outputs.pass-percentage }}% pass rate"
          echo "Proceeding with deployment..."

      - name: Generate deployment tags
        id: deployment-tags
        run: |
          # Get last 5 digits of commit SHA from previous job
          SHORT_SHA=${{ needs.build-and-push.outputs.SHORT_SHA }}
          echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_OUTPUT
          echo "IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$SHORT_SHA" >> $GITHUB_OUTPUT

      - name: Configure Kubernetes
        uses: azure/k8s-set-context@v3
        with:
          kubeconfig: ${{ secrets.KUBECONFIG }}

      - name: Create namespace if not exists
        run: kubectl create namespace ${{ env.K8S_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy to Kubernetes
        uses: azure/k8s-deploy-action@v4
        with:
          namespace: ${{ env.K8S_NAMESPACE }}
          manifests: |
            k8s/deployment.yaml
            k8s/service.yaml
          images: |
            ${{ steps.deployment-tags.outputs.IMAGE }}
          imagepullsecrets: |
            regcred

      - name: Verify deployment
        run: |
          kubectl rollout status deployment/${{ env.APP_NAME }} -n ${{ env.K8S_NAMESPACE }} --timeout=300s
          kubectl get pods -n ${{ env.K8S_NAMESPACE }}
          echo "✅ Deployment successful!"
