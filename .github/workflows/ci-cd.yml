name: Django CI/CD Pipeline

on:
  push:
    branches: [ ci-cd ]
  pull_request:
    branches: [ ci-cd ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  K8S_NAMESPACE: django-app
  APP_NAME: django-app
  TRIVY_PASS_THRESHOLD: 80
  # Update this with your SonarQube internal IP
  SONAR_HOST_URL: http://192.168.0.101:30314

jobs:
  sonarqube:
    name: SonarQube Scan
    runs-on: self-hosted # This requires setting up a self-hosted runner
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ env.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=django-app
            -Dsonar.projectName="Django Application"
            -Dsonar.python.version=3.10
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.exclusions=**/migrations/**

      - name: Check SonarQube Quality Gate
        uses: SonarSource/sonarqube-quality-gate-action@v1
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ env.SONAR_HOST_URL }}

      - name: Download SonarQube Report
        run: |
          curl -s -u "${SONAR_TOKEN}:" \
            "${SONAR_HOST_URL}/api/issues/search?componentKeys=django-app&resolved=false" \
            -o sonar-issues.json
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ env.SONAR_HOST_URL }}

      - name: Upload Sonar Report
        uses: actions/upload-artifact@v4
        with:
          name: sonar-issues-report
          path: sonar-issues.json

  secrets-scan:
    name: Secret Scan with Gitleaks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Scan for secrets
        uses: zricethezav/gitleaks-action@master
        with:
         config: .gitleaks.toml
         report_format: sarif
         report_path: results.sarif
         redact: true
         verbose: true
        env:
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      - name: Upload Gitleaks Report
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: gitleaks-report.json
